<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hbase | くまくまーZ]]></title>
  <link href="http://maiha.github.com/blog/categories/hbase/atom.xml" rel="self"/>
  <link href="http://maiha.github.com/"/>
  <updated>2012-03-13T13:36:28+09:00</updated>
  <id>http://maiha.github.com/</id>
  <author>
    <name><![CDATA[maiha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ScalaでHbase (基本操作)]]></title>
    <link href="http://maiha.github.com/blog/2012/03/12/hbase-scala/"/>
    <updated>2012-03-12T13:20:00+09:00</updated>
    <id>http://maiha.github.com/blog/2012/03/12/hbase-scala</id>
    <content type="html"><![CDATA[<h3>versions</h3>

<ul>
<li>Scala-2.9.1.final</li>
<li>xsbt-0.11.2</li>
<li>Hbase-0.92.0</li>
<li>Hadoop-1.0.1</li>
</ul>


<h3>build.sbt</h3>

<p>```scala
resolvers += "Apache HBase" at "https://repository.apache.org/content/repositories/releases"</p>

<p>resolvers += "Thrift" at "http://people.apache.org/~rawson/repo/"</p>

<p>libraryDependencies ++= Seq(</p>

<pre><code>"org.apache.hadoop" % "hadoop-core" % "1.0.1",
"org.apache.hbase" % "hbase" % "0.92.0"
</code></pre>

<p>)
```</p>

<h3>使用例 (共通部分)</h3>

<p>```scala
import org.apache.hadoop.hbase.{HBaseConfiguration,HTableDescriptor,HColumnDescriptor}
import org.apache.hadoop.hbase.client.{HBaseAdmin,HTable,Put,Get,Delete,Scan}
import org.apache.hadoop.hbase.util.Bytes</p>

<p>val conf  = new HBaseConfiguration
val admin = new HBaseAdmin(conf)
```</p>

<h3>既存テーブルの情報を取得</h3>

<p><code>hbase shell</code>の<code>list</code></p>

<p><code>scala
admin.listTables.foreach(println)
</code></p>

<pre><code>{NAME =&gt; 'adviewlogs', FAMILIES =&gt; [{NAME =&gt; 'ad', ...
{NAME =&gt; 'users', FAMILIES =&gt; [{NAME =&gt; 'name', ...
</code></pre>

<h3>テーブルの新規作成</h3>

<p><code>hbase shell</code>の<code>create 'songs', 'data'</code></p>

<p><code>scala
val schema = new HTableDescriptor("songs")
schema.addFamily(new HColumnDescriptor("data"))
admin.createTable(schema)
</code></p>

<h3>行の追加</h3>

<p><code>hbase shell</code>の<code>put 'songs', 'row1', 'data:title', '走れ'</code></p>

<p>```scala
val songs = new HTable(conf, "songs")
val put   = new Put("row1".getBytes)
put.add("data".getBytes, "title".getBytes, "走れ".getBytes)
songs.put(put)</p>

<p>```</p>

<h3>行の追加(複数のcf)</h3>

<p><code>hbase shell</code>の<code>put 'songs', 'row2', 'data', {'title'=&gt;'怪盗少女', 'singer'=&gt;'ももクロ'}</code></p>

<p>```scala
val songs = new HTable(conf, "songs")
val put   = new Put("row2".getBytes)
put.add("data".getBytes, "title".getBytes, "怪盗少女".getBytes)
put.add("data".getBytes, "singer".getBytes, "ももクロ".getBytes)
songs.put(put)</p>

<p>```</p>

<h3>行の取得 (cf:qualifier指定)</h3>

<p><code>hbase shell</code>の<code>get 'songs', 'row2', 'data:title'</code></p>

<p>```scala
val songs  = new HTable(conf, "songs")
val get    = new Get("row2".getBytes)
val row2   = songs.get(get)
val title  = row2.getValue("data".getBytes, "title".getBytes)
println(Bytes.toString(title))</p>

<p>```</p>

<pre><code>怪盗少女
</code></pre>

<h3>行の取得 (cf内全部)</h3>

<p><code>hbase shell</code>の<code>get 'songs', 'row2', 'data'</code></p>

<p>```scala
import scala.collection.JavaConversions._     // for entrySet:java.util.Set</p>

<p>val songs  = new HTable(conf, "songs")
val get    = new Get("row2".getBytes)
val row2   = songs.get(get)
val cf     = row2.getFamilyMap("data".getBytes)</p>

<p>for (entry &lt;- cf.entrySet) {
  val key   = Bytes.toString(entry.getKey)
  val value = Bytes.toString(entry.getValue)
  printf("%s: %s\n", key, value)
}
```</p>

<pre><code>singer: ももクロ
title: 怪盗少女
</code></pre>

<p>存在しない場合は <code>getFamilyMap</code>が<code>null</code> (要チェック)</p>

<h3>行の削除 (cf指定)</h3>

<p><code>hbase shell</code>の<code>delete 'songs', 'row1', 'data'</code> (shellではqualifierがないと動かない?)</p>

<p>```scala
val songs  = new HTable(conf, "songs")
val del    = new Delete("row1".getBytes)
del.deleteFamily("data".getBytes)
songs.delete(del)</p>

<p>```
存在しない場合はnop</p>

<h3>行の削除 (1行全体)</h3>

<p><code>hbase shell</code>の<code>delete 'songs', 'row2'</code>みたいなこと (これもshellではできない)</p>

<p>```scala
val songs  = new HTable(conf, "songs")
val del    = new Delete("row2".getBytes)
songs.delete(del)</p>

<p>```
存在しない場合はnop</p>

<h3>件数取得</h3>

<p><code>hbase shell</code>の<code>count 'songs'</code></p>

<p>自分でscanするしかない？
<code>org.apache.hadoop.hbase.mapreduce.RowCounter</code> あたりを使う？</p>

<h3>行の存在確認</h3>

<p><code>hbase shell</code>にはない</p>

<p>```scala
val songs  = new HTable(conf, "songs")
val get    = new Get("row3".getBytes)
songs.exists(get)</p>

<p>```</p>

<h3>範囲取得</h3>

<p>検索用データとして以下を <code>hbase shell</code> で追加 (ROW_KEY: 発売日)
<code>ruby
put 'songs', '20090805', 'data:title', 'ももいろパンチ'
put 'songs', '20100505', 'data:title', '怪盗少女'
put 'songs', '20101110', 'data:title', 'ピンキージョーンズ'
put 'songs', '20110706', 'data:title', 'Z伝説'
</code></p>

<p>2010年に発売された曲を調べる</p>

<p><code>scala
val scan = new Scan("2010".getBytes, "2011".getBytes)
val iter = songs.getScanner(scan)
println(iter.size)
</code></p>

<pre><code>2
</code></pre>

<ul>
<li>Scan(start, end)のendは含まれない (ruby の<code>start...end</code>)</li>
<li>HbaseではRAW_KEYによる文字列ソートが保証されている (RAW_KEYの設計が重要)</li>
</ul>


<h3>テーブル削除</h3>

<p><code>hbase shell</code>の<code>disable 'songs'</code>と<code>delete</code>songs'`</p>

<p><code>scala
admin.disableTable("songs".getBytes)
admin.deleteTable("songs".getBytes)
</code></p>

<h3>参考</h3>

<ul>
<li><a href="http://wiki.apache.org/hadoop/Hbase/Scala">http://wiki.apache.org/hadoop/Hbase/Scala</a></li>
<li><a href="http://www.atmarkit.co.jp/fjava/rensai4/bigdata_java03/03.html">http://www.atmarkit.co.jp/fjava/rensai4/bigdata_java03/03.html</a></li>
<li>ScalaからHBaseを使ってみる（0.20.6）<a href="http://www.mwsoft.jp/programming/hadoop/hbase_scala.html">http://www.mwsoft.jp/programming/hadoop/hbase_scala.html</a></li>
<li><a href="http://happy-camper.st/lang/java/hbase/hbase-mapreduce-in-scala.html">http://happy-camper.st/lang/java/hbase/hbase-mapreduce-in-scala.html</a></li>
<li>RowCounter <a href="http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/mapreduce/RowCounter.html">http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/mapreduce/RowCounter.html</a></li>
<li>ももいろクローバーZ <a href="http://ja.wikipedia.org/wiki/%E3%82%82%E3%82%82%E3%81%84%E3%82%8D%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%90%E3%83%BCZ">http://ja.wikipedia.org/wiki/%E3%82%82%E3%82%82%E3%81%84%E3%82%8D%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%90%E3%83%BCZ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hbaseを動かしてみる]]></title>
    <link href="http://maiha.github.com/blog/2012/03/09/hbase/"/>
    <updated>2012-03-09T10:40:00+09:00</updated>
    <id>http://maiha.github.com/blog/2012/03/09/hbase</id>
    <content type="html"><![CDATA[<p>Hbaseを使ったことがない Ubuntu 11.10(oneiric) ユーザがHbaseを動かすまでのメモ</p>

<h3>インストール</h3>

<p>正式なパッケージはないのでppaを利用する。
(パッケージはまだ実験中でfeedback歓迎らしい [2012.3.7現在])</p>

<pre><code>sudo apt-get install python-software-properties
sudo add-apt-repository ppa:hadoop-ubuntu/dev
sudo apt-get update
sudo apt-get install hbase
</code></pre>

<p><code>/etc/hosts</code> を見て、loopback IPが<code>127.0.0.1</code>になってるいるかを確認する
(内部的に127.0.0.1決め打ちでアクセス？)</p>

<pre><code>127.0.0.1 localhost
</code></pre>

<p><code>/etc/security/limits.conf</code> の最後に以下を追加
("hbase" は動かすユーザ名を指定)</p>

<pre><code>hbase  -       nofile  32768
</code></pre>

<p><code>/etc/pam.d/common-session</code> の最後に以下を追加
(前述のlimits.confを有効にするための設定)</p>

<pre><code>session required  pam_limits.so
</code></pre>

<h3>設定</h3>

<p>データファイルの保存場所を作成。(defaultは/tmp)</p>

<pre><code>mkdir /var/lib/hbase/data
chown hbase:hbase /var/lib/hbase/data
</code></pre>

<p><code>/etc/hbase/conf/hbase-site.xml</code> の <code>configuration</code> の中に以下を追加</p>

<p>```xml
<configuration>
  <property></p>

<pre><code>&lt;name&gt;hbase.rootdir&lt;/name&gt;
&lt;value&gt;file:////var/lib/hbase/data&lt;/value&gt;
</code></pre>

<p>  </property>
</configuration>
```</p>

<h3>サービスの管理 (hbaseユーザで実行)</h3>

<p><code>hbase master</code> で管理できる。引数なしでusageが表示</p>

<pre><code>% hbase master
Usage: Master [opts] start|stop
 start  Start Master. If local mode, start Master and RegionServer in same JVM
 stop   Start cluster shutdown; Master signals RegionServer shutdown
 where [opts] are:
   --minServers=&lt;servers&gt;    Minimum RegionServers needed to host user tables.
   --backup                  Master should start in backup mode
</code></pre>

<h4>サービス起動</h4>

<p>startはforegroundで動くので、"> log &amp;" とかがいいのかもしれない。</p>

<pre><code>hbase master start &gt; server.log 2&gt;&amp;1 &amp;
</code></pre>

<h4>サービス停止</h4>

<pre><code>hbase master stop
</code></pre>

<h3>クライアントから利用</h3>

<p><code>hbase shell</code> を実行するとconsoleが開く。見た目はirbで、中身もirb。helpでヘルプが見える。
一般ユーザが認証なしで接続できる。
(TODO: 認証方法)</p>

<pre><code>% hbase shell
hbase(main):001:0&gt; self.class.ancestors
=&gt; [Object, HBaseConstants, Java, Kernel]
hbase(main):002:0&gt; help
HBase Shell, version 0.92.0, r1231986, Mon Jan 16 13:16:35 UTC 2012
Type 'help "COMMAND"', (e.g. 'help "get"' -- the quotes are necessary) for help on a specific command.
Commands are grouped. Type 'help "COMMAND_GROUP"', (e.g. 'help "general"') for help on a command group.
...
</code></pre>

<h4>コマンド一覧</h4>

<pre><code>テーブル作成　create 't1', 'f1', 'f2',...
テーブル削除　drop 't1'
テーブル有効　enable 't1'
テーブル無効　disable 't1'
テーブル情報　describe 't1'
データ登録　　put 't1', 'r1', 'c1', 'value', ts1
データ削除　  delete 't1', 'r1', 'c1', ts1
全行表示　　　scan 't1'
一行表示　　　get 't1', 'r1'
</code></pre>

<h4>実行例</h4>

<p><code>ruby
hbase(main):001:0&gt; create 'users', 'name', 'color'
hbase(main):002:0&gt; put 'users', '1', 'name:name', '百田夏菜子'
hbase(main):003:0&gt; put 'users', '1', 'name:yomi', 'ももたかなこ'
hbase(main):004:0&gt; put 'users', '1', 'color:', 'red'
hbase(main):005:0&gt; put 'users', '2', 'name:name', 'hoge'
hbase(main):006:0&gt; get 'users', '1', ['name:yomi', 'color']
COLUMN                          CELL
 color:                         timestamp=1331280696571, value=red
 name:yomi                      timestamp=1331280681186, value=\xE3\x82\x82\xE3 ...
hbase(main):007:0&gt; delete 'users', '2', 'name:name'
hbase(main):008:0&gt; drop 'users'
ERROR: Table users is enabled. Disable it first.
hbase(main):009:0&gt; disable 'users'
hbase(main):010:0&gt; drop 'users'
</code></p>

<p>(TODO: 日本語の表示について調べる)</p>

<h3>参考</h3>

<ul>
<li>Install hbase on Ubuntu 11.10  <a href="http://www.mail-archive.com/user@hbase.apache.org/msg14752.html">http://www.mail-archive.com/user@hbase.apache.org/msg14752.html</a></li>
<li>Apache Hbase <a href="http://hbase.apache.org/book.html#quickstart">http://hbase.apache.org/book.html#quickstart</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
